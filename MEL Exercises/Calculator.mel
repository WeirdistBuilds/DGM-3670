global proc float Calculator(int $function, float $nums[])
{
    float $result = 1;
	
	string $numstring;
	string $separatenumstring;
	string $answer;
	
	for($i = 0; $i < size($nums); $i++)
	{
		$numstring += ("" + $nums[$i] + ", ");
	}
	
	for($i = 1; $i < size($nums); $i++)
	{
		$separatenumstring += ("" + $nums[$i] + ", ");
	}
    
	switch($function)
	{
		case 1:
			$answer = ("The sum of " + $numstring + "is:\n");
			print $answer;
			$result = Add($nums);
			break;
		case 2:
			$answer = ("Subtracting " + $separatenumstring + " from " + $nums[0] + " is:\n");
			print $answer;
			$result = Subtract($nums);
			break;
		case 3:
			$answer = ("The result of multiplying " + $numstring + " is:\n");
			print $answer;
			$result = Multiply($nums);
			break;
		case 4:
			$answer = ("Dividing " + $separatenumstring + " from " + $nums[0] + "is:\n");
			print $answer;
			$result = Divide($nums);
			break;
		case 5:
			$answer = ("Power function only uses the first two numbers in a float array.\n");
			print $answer;
			$result = Power($nums);
			break;
		case 6:
			$answer = ("The mean of " + $numstring + " is:\n");
			print $answer;
			$result = Mean($nums);
			break;
		case 7:
			$answer = ("The median of " + $numstring + " is:\n");
			print $answer;
			$result = Median($nums);
			break;
		case 8:
			$answer = ("The mode of " + $numstring + " is:\n");
			print $answer;
			$result = Mode($nums);
			break;
		default:
			$answer = ("Function parameter must be from 1-8.");
			print $answer;
			break;
	}
	
	return $result;
}


global proc float Add(float $add[])
{
	float $result = 0;
	
	for($i = 0; $i < size($add); $i++)
	{
		$result += $add[$i];
	}
	return $result;
}

global proc float Subtract(float $subtract[])
{
	float $result = $subtract[0];
	
	for($i = 1; $i < size($subtract); $i++)
	{
		$result -= $subtract[$i];
	}
	return $result;
}

global proc float Multiply(float $multiply[])
{
	float $result = $multiply[0];
	
	for($i = 1; $i < size($multiply); $i++)
	{
		$result *= $multiply[$i];
	}
	return $result;
}

global proc float Divide(float $divide[])
{
	float $result = $divide[0];
	
	for($i = 1; $i < size($divide); $i++)
	{
	    if($divide[$i] != 0)
	    {
	        $result /= $divide[$i];
	    }		
	}
	return $result;
}

global proc float Power(float $power[])
{
	float $result = $power[0];
	float $exp = $power[1];
	
	if($exp == 0)
	{
		return 1;
	}
	else
	{
		$power[0] = $result;
		$power[1] = $exp - 1;
		return $result * Power($power);
	}
}

global proc float Mean(float $mean[])
{
	float $result = Add($mean) / size($mean);
	return $result;
}

global proc float Median(float $median[])
{
	float $result;
	float $sorted[] = `sort $median`;
	int $midnum = `floor(size($sorted) / 2)`;
	
	if (size($sorted) % 2 == 0)
	{
		$result = ($sorted[$midnum - 1] + $sorted[$midnum]) / 2;
	}
	else
	{
		$result = $sorted[$midnum];
	}
	
	return $result;
}

global proc float Mode(float $mode[])
{
	int $count = 1;
	int $countMode = 1;

	float $sorted[] = `sort $mode`;
	float $number = $sorted[0];
	float $result = $number;

	for ($i = 1; $i < size($sorted); $i++)
	{
		if ($sorted[$i] == $number)
		{
			$count++;
		}
		else
		{
			if ($count > $countMode) 
			{
				$countMode = $count;
				$result = $number;
			}
		$count = 1;
		$number = $sorted[$i];
		}
	
	}

	return $result;
}

float $nums[] = {2,3,3,4,5,1,1,1,2};

Calculator(1, $nums);
Calculator(2, $nums);
Calculator(3, $nums);
Calculator(4, $nums);
Calculator(5, $nums);
Calculator(6, $nums);
Calculator(7, $nums);
Calculator(8, $nums);